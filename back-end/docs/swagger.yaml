basePath: /api/v1
definitions:
  api.AllianceMember:
    properties:
      contact_details:
        type: string
      did:
        type: string
      id:
        type: string
      join_date:
        type: string
      location:
        type: string
      member_type:
        description: '"producer", "processor", "exporter", "regulator", etc.'
        type: string
      name:
        type: string
      status:
        description: '"active", "pending", "suspended"'
        type: string
      website:
        type: string
    type: object
  api.ApproveHatcheryRequest:
    properties:
      comment:
        type: string
      is_approved:
        type: boolean
    type: object
  api.BatchJourneyResponse:
    properties:
      batch_id:
        type: string
      current_time:
        type: string
      locations:
        items:
          $ref: '#/definitions/api.GeoLocation'
        type: array
      start_time:
        type: string
      total_distance:
        type: number
      transit_time:
        type: string
    type: object
  api.BlockchainNodeConfig:
    properties:
      endpoint:
        type: string
      is_active:
        type: boolean
      is_validator:
        type: boolean
      network_id:
        type: string
      node_name:
        type: string
      node_type:
        description: validator, peer, etc.
        type: string
      parameters:
        additionalProperties:
          type: string
        type: object
    type: object
  api.ComplianceCheckRequest:
    properties:
      batch_id:
        type: string
      standard_id:
        type: string
    type: object
  api.ComplianceCheckResult:
    properties:
      batch_id:
        type: string
      checked_at:
        type: string
      compliance_score:
        type: number
      is_compliant:
        type: boolean
      issues:
        items:
          $ref: '#/definitions/api.ComplianceIssue'
        type: array
      requirements_met:
        additionalProperties: true
        type: object
      standard_id:
        type: string
      standard_name:
        type: string
    type: object
  api.ComplianceIssue:
    properties:
      description:
        type: string
      recommendation:
        type: string
      requirement:
        type: string
      severity:
        description: '"critical", "major", "minor"'
        type: string
    type: object
  api.ComplianceReport:
    properties:
      batch_id:
        type: string
      details:
        additionalProperties: true
        type: object
      generated_at:
        type: string
      overall_status:
        type: string
      recommended_actions:
        items:
          type: string
        type: array
      standards:
        items:
          type: string
        type: array
    type: object
  api.CosmosBridgeRequest:
    properties:
      account_address:
        type: string
      api_key:
        type: string
      chain_id:
        type: string
      node_endpoint:
        type: string
    type: object
  api.CreateBatchRequest:
    properties:
      hatchery_id:
        type: integer
      quantity:
        type: integer
      species:
        type: string
    type: object
  api.CreateCompanyRequest:
    properties:
      contact_info:
        type: string
      location:
        type: string
      name:
        type: string
      type:
        type: string
    type: object
  api.CreateEventRequest:
    properties:
      actor_id:
        type: integer
      batch_id:
        type: integer
      event_type:
        type: string
      location:
        type: string
      metadata:
        additionalProperties: true
        type: object
    type: object
  api.CreateFarmRequest:
    properties:
      area_size:
        type: number
      capacity:
        type: integer
      company_id:
        type: integer
      contact:
        type: string
      coordinates:
        type: string
      farm_type:
        type: string
      location:
        type: string
      name:
        type: string
    type: object
  api.CreateFarmingRecordRequest:
    properties:
      batch_id:
        type: string
      description:
        type: string
      farm_id:
        type: string
      metadata:
        additionalProperties: true
        type: object
      record_type:
        type: string
    type: object
  api.CreateHatcheryRequest:
    properties:
      company_id:
        type: integer
      contact:
        type: string
      location:
        type: string
      name:
        type: string
    type: object
  api.CreateIdentityRequest:
    properties:
      entity_name:
        type: string
      entity_type:
        description: '"company", "user", "hatchery", "farm", "processor", etc.'
        type: string
      metadata:
        additionalProperties: true
        type: object
    type: object
  api.CreateShipmentTransferRequest:
    properties:
      auto_generate_nft:
        type: boolean
      batch_id:
        type: integer
      destination_id:
        type: string
      destination_type:
        type: string
      metadata:
        additionalProperties: true
        type: object
      quantity:
        type: integer
      source_id:
        type: string
      source_type:
        type: string
      transfer_notes:
        type: string
    type: object
  api.CreateVerifiableClaimRequest:
    properties:
      claim_type:
        description: '"CertifiedHatchery", "OrganicFarm", "QualityProcessor", etc.'
        type: string
      claims:
        additionalProperties: true
        type: object
      expiry_days:
        type: integer
      issuer_did:
        type: string
      subject_did:
        type: string
    type: object
  api.CrossChainTransactionResponse:
    properties:
      dest_chain_id:
        type: string
      destination_tx_id:
        type: string
      payload:
        additionalProperties: true
        type: object
      source_chain_id:
        type: string
      source_tx_id:
        type: string
      status:
        type: string
      timestamp:
        type: string
    type: object
  api.CurrentLocationResponse:
    properties:
      batch_id:
        type: string
      last_updated:
        type: string
      location:
        $ref: '#/definitions/api.GeoLocation'
      status:
        type: string
    type: object
  api.DIDListResponse:
    properties:
      dids:
        items:
          $ref: '#/definitions/api.DIDSummary'
        type: array
      limit:
        type: integer
      page:
        type: integer
      total:
        type: integer
    type: object
  api.DIDRequest:
    properties:
      claims:
        additionalProperties: true
        description: Claims to include in the DID
        type: object
      entity_id:
        description: ID of the related entity
        type: integer
      entity_type:
        description: e.g., "person", "organization", "hatchery"
        type: string
    type: object
  api.DIDResponse:
    properties:
      controller_did:
        type: string
      created:
        type: string
      did:
        type: string
      metadata:
        additionalProperties: true
        type: object
      proof:
        additionalProperties: true
        type: object
      public_key:
        type: string
      status:
        type: string
      updated:
        type: string
    type: object
  api.DIDSummary:
    properties:
      created:
        type: string
      did:
        type: string
      entity_name:
        type: string
      entity_type:
        type: string
      status:
        type: string
    type: object
  api.DecentralizedIDResponse:
    properties:
      controller_did:
        type: string
      created:
        type: string
      did:
        type: string
      metadata:
        additionalProperties: true
        type: object
      public_key:
        type: string
      status:
        type: string
      updated:
        type: string
    type: object
  api.ErrorResponse:
    properties:
      error:
        type: string
      error_detail:
        type: string
      error_type:
        type: string
      message:
        type: string
      method:
        type: string
      path:
        type: string
      request_id:
        type: string
      status_code:
        type: integer
      success:
        type: boolean
      timestamp:
        type: string
    type: object
  api.ExportReportRequest:
    properties:
      batch_id:
        type: integer
      format:
        $ref: '#/definitions/api.ReportFormat'
    type: object
  api.Farm:
    properties:
      area_size:
        description: in hectares or square meters
        type: number
      capacity:
        description: maximum capacity
        type: integer
      company_id:
        type: integer
      contact:
        type: string
      coordinates:
        description: GPS coordinates
        type: string
      created_at:
        type: string
      did:
        description: Decentralized Identity
        type: string
      farm_type:
        description: '"pond", "tank", "cage", etc.'
        type: string
      id:
        type: string
      is_active:
        type: boolean
      location:
        type: string
      name:
        type: string
      updated_at:
        type: string
    type: object
  api.FarmingRecord:
    properties:
      batch_id:
        type: string
      blockchain_tx_id:
        type: string
      description:
        type: string
      farm_id:
        type: string
      id:
        type: string
      metadata:
        additionalProperties: true
        type: object
      record_type:
        description: '"feeding", "treatment", "monitoring", etc.'
        type: string
      recorded_at:
        type: string
      recorded_by:
        type: string
    type: object
  api.ForgotPasswordRequest:
    properties:
      email:
        type: string
    type: object
  api.GeoLocation:
    properties:
      accuracy:
        type: number
      altitude:
        type: number
      description:
        type: string
      latitude:
        type: number
      location_type:
        description: '"hatchery", "farm", "processing", "storage", "transportation",
          "export", etc.'
        type: string
      longitude:
        type: number
      timestamp:
        type: string
    type: object
  api.IBCChannelRequest:
    properties:
      chain_id:
        type: string
      channel_id:
        type: string
      connection_id:
        type: string
      counterparty_channel_id:
        type: string
      counterparty_port_id:
        type: string
      port_id:
        type: string
    type: object
  api.IBCPacketRequest:
    properties:
      channel_id:
        type: string
      dest_chain_id:
        type: string
      payload:
        additionalProperties: true
        type: object
      source_chain_id:
        type: string
      timeout_in_minutes:
        type: integer
    type: object
  api.InterChainAccountRequest:
    properties:
      connection_id:
        type: string
      owner:
        type: string
      source_chain_id:
        type: string
      target_chain_id:
        type: string
    type: object
  api.InterChainAccountTxRequest:
    properties:
      connection_id:
        type: string
      memo:
        type: string
      messages:
        items:
          additionalProperties: true
          type: object
        type: array
      owner:
        type: string
      source_chain_id:
        type: string
      target_chain_id:
        type: string
    type: object
  api.InteroperabilityRegisterChainRequest:
    properties:
      chain_id:
        type: string
      chain_type:
        type: string
      endpoint:
        type: string
    type: object
  api.InteroperabilityShareBatchRequest:
    properties:
      batch_id:
        type: string
      data_standard:
        type: string
      dest_chain_id:
        type: string
    type: object
  api.JoinAllianceRequest:
    properties:
      contact_details:
        type: string
      did:
        type: string
      location:
        type: string
      member_type:
        type: string
      metadata:
        additionalProperties: true
        type: object
      name:
        type: string
      website:
        type: string
    type: object
  api.Location:
    properties:
      address:
        type: string
      latitude:
        type: number
      longitude:
        type: number
    type: object
  api.LockUserRequest:
    properties:
      is_active:
        type: boolean
      reason:
        type: string
    type: object
  api.LoginRequest:
    properties:
      password:
        type: string
      username:
        type: string
    type: object
  api.NFTContractDeployRequest:
    properties:
      contract_name:
        type: string
      contract_symbol:
        type: string
      init_args:
        additionalProperties: true
        type: object
      logistics_address:
        type: string
      network_id:
        type: string
    type: object
  api.PolkadotBridgeRequest:
    properties:
      api_key:
        type: string
      chain_id:
        type: string
      parachain_id:
        type: string
      relay_chain_id:
        type: string
      relay_endpoint:
        type: string
    type: object
  api.ReceiveBatchRequest:
    properties:
      batch_id:
        type: string
      metadata:
        additionalProperties: true
        type: object
      quantity:
        type: integer
      receipt_notes:
        type: string
    type: object
  api.RecordEnvironmentDataRequest:
    properties:
      age:
        type: integer
      batch_id:
        type: integer
      density:
        type: number
      ph:
        type: number
      salinity:
        type: number
      temperature:
        type: number
    type: object
  api.RecordGeoLocationRequest:
    properties:
      accuracy:
        type: number
      altitude:
        type: number
      batch_id:
        type: string
      description:
        type: string
      latitude:
        type: number
      location_type:
        type: string
      longitude:
        type: number
    type: object
  api.RefreshTokenRequest:
    properties:
      access_token:
        type: string
    type: object
  api.RegisterRequest:
    properties:
      company_id:
        description: Optional for user role
        type: string
      email:
        type: string
      password:
        type: string
      role:
        type: string
      username:
        type: string
    type: object
  api.ReportFormat:
    enum:
    - pdf
    - gs1_epcis
    - json
    - excel
    type: string
    x-enum-varnames:
    - FormatPDF
    - FormatGS1
    - FormatJSON
    - FormatExcel
  api.ResetPasswordRequest:
    properties:
      email:
        type: string
      new_password:
        type: string
      otp:
        type: string
    type: object
  api.RevokeCertificateRequest:
    properties:
      reason:
        type: string
    type: object
  api.RevokeDIDRequest:
    properties:
      did:
        type: string
      reason:
        type: string
    type: object
  api.ShardingConfigRequest:
    properties:
      config_params:
        additionalProperties: true
        type: object
      description:
        type: string
      enabled:
        type: boolean
      shard_count:
        type: integer
      shard_strategy:
        description: '"geographic", "batch-type", "timestamp"'
        type: string
      sharding_type:
        description: '"state", "transaction", "data"'
        type: string
    type: object
  api.ShareDataRequest:
    properties:
      batch_id:
        type: string
      data_type:
        description: '"origin", "quality", "certification", etc.'
        type: string
      description:
        type: string
      permissions:
        description: '"read_only", "read_write", etc.'
        type: string
      recipients:
        description: Member IDs, if empty share with all members
        items:
          type: string
        type: array
    type: object
  api.SharedDataResponse:
    properties:
      access_token:
        type: string
      access_url:
        type: string
      batch_id:
        type: string
      data_summary:
        additionalProperties: true
        type: object
      data_type:
        type: string
      description:
        type: string
      id:
        type: string
      permissions:
        type: string
      shared_at:
        type: string
      shared_by:
        type: string
      shared_with:
        items:
          type: string
        type: array
    type: object
  api.StandardCheckRequest:
    properties:
      batch_id:
        type: integer
      standards:
        description: e.g., ["FDA", "ASC"]
        items:
          type: string
        type: array
    type: object
  api.SuccessResponse:
    properties:
      data: {}
      message:
        type: string
      success:
        type: boolean
    type: object
  api.SupplyChainDetails:
    properties:
      blockchain_records:
        items:
          additionalProperties: true
          type: object
        type: array
      created_at:
        type: string
      events:
        items:
          additionalProperties: true
          type: object
        type: array
      exporter_details:
        items:
          additionalProperties: true
          type: object
        type: array
      farm_details:
        items:
          additionalProperties: true
          type: object
        type: array
      hatchery_details:
        additionalProperties: true
        type: object
      id:
        type: string
      nft_details:
        additionalProperties: true
        type: object
      processor_details:
        items:
          additionalProperties: true
          type: object
        type: array
      species:
        type: string
      status:
        type: string
      transfer_history:
        items:
          $ref: '#/definitions/models.ShipmentTransfer'
        type: array
    type: object
  api.TimelineAnomaly:
    properties:
      actualValue: {}
      confidence:
        type: number
      description:
        type: string
      expectedValue: {}
      id:
        type: string
      metadata:
        additionalProperties: true
        type: object
      relatedEvents:
        items:
          type: string
        type: array
      timestamp:
        type: string
      type:
        type: string
    type: object
  api.TimelineEnvironment:
    properties:
      deviceId:
        type: string
      humidity:
        type: number
      id:
        type: string
      light:
        type: number
      location:
        $ref: '#/definitions/api.Location'
      metadata:
        additionalProperties: true
        type: object
      pressure:
        type: number
      temperature:
        type: number
      timestamp:
        type: string
    type: object
  api.TimelineEvent:
    properties:
      actor:
        type: string
      description:
        type: string
      id:
        type: string
      location:
        $ref: '#/definitions/api.Location'
      metadata:
        additionalProperties: true
        type: object
      timestamp:
        type: string
      type:
        type: string
    type: object
  api.TimelineTransfer:
    properties:
      from:
        type: string
      id:
        type: string
      location:
        $ref: '#/definitions/api.Location'
      metadata:
        additionalProperties: true
        type: object
      status:
        type: string
      timestamp:
        type: string
      to:
        type: string
    type: object
  api.TokenResponse:
    properties:
      access_token:
        type: string
      expires_in:
        type: integer
      token_type:
        type: string
    type: object
  api.TokenizeBatchRequest:
    properties:
      batch_id:
        type: string
      contract_address:
        type: string
      network_id:
        type: string
      recipient_address:
        type: string
      transfer_id:
        description: Optional transfer ID to associate with NFT
        type: string
    type: object
  api.TokenizeTransactionRequest:
    properties:
      contract_address:
        description: NFT contract address
        type: string
      metadata:
        additionalProperties: true
        description: Additional metadata for the NFT
        type: object
      network_id:
        description: Blockchain network ID
        type: string
      recipient_address:
        description: Address to receive the NFT
        type: string
      transfer_id:
        description: Required shipment transfer ID
        type: string
    required:
    - contract_address
    - network_id
    - recipient_address
    - transfer_id
    type: object
  api.TraceByQRCodeResponse:
    properties:
      batch:
        $ref: '#/definitions/models.BatchWithHatchery'
      blockchain_info:
        items:
          $ref: '#/definitions/models.BlockchainRecord'
        type: array
      documents:
        items:
          $ref: '#/definitions/models.Document'
        type: array
      environment_data:
        items:
          $ref: '#/definitions/models.EnvironmentData'
        type: array
      events:
        items:
          $ref: '#/definitions/models.EventWithActor'
        type: array
      logistics_chain:
        items:
          $ref: '#/definitions/models.LogisticsEvent'
        type: array
    type: object
  api.TransactionTimelineResponse:
    properties:
      anomalies:
        items:
          $ref: '#/definitions/api.TimelineAnomaly'
        type: array
      batchId:
        type: string
      environmentData:
        items:
          $ref: '#/definitions/api.TimelineEnvironment'
        type: array
      events:
        items:
          $ref: '#/definitions/api.TimelineEvent'
        type: array
      transfers:
        items:
          $ref: '#/definitions/api.TimelineTransfer'
        type: array
    type: object
  api.TransferBatchRequest:
    properties:
      batch_id:
        type: string
      destination:
        type: string
      destination_type:
        type: string
      generate_nft:
        type: boolean
      metadata:
        additionalProperties: true
        type: object
      quantity:
        type: integer
      transfer_notes:
        type: string
    type: object
  api.TransferNFTRequest:
    properties:
      contract_address:
        type: string
      from_address:
        type: string
      network_id:
        type: string
      to_address:
        type: string
    type: object
  api.UpdateBatchStatusRequest:
    properties:
      status:
        type: string
    type: object
  api.UpdateCompanyRequest:
    properties:
      contact_info:
        type: string
      location:
        type: string
      name:
        type: string
      type:
        type: string
    type: object
  api.UpdateDIDPermissionsRequest:
    properties:
      did:
        type: string
      permissions:
        additionalProperties:
          type: boolean
        type: object
    type: object
  api.UpdateFarmRequest:
    properties:
      area_size:
        type: number
      capacity:
        type: integer
      contact:
        type: string
      coordinates:
        type: string
      farm_type:
        type: string
      is_active:
        type: boolean
      location:
        type: string
      name:
        type: string
    type: object
  api.UpdateHatcheryRequest:
    properties:
      contact:
        type: string
      location:
        type: string
      name:
        type: string
    type: object
  api.UpdateProfileRequest:
    properties:
      avatar:
        description: Base64 encoded image
        type: string
      date_of_birth:
        type: string
      email:
        type: string
      full_name:
        type: string
      phone:
        type: string
    type: object
  api.UpdateShipmentTransferRequest:
    properties:
      metadata:
        additionalProperties: true
        type: object
      status:
        type: string
      transfer_notes:
        type: string
    type: object
  api.VerifiableClaimRequest:
    properties:
      claim_type:
        type: string
      claims:
        additionalProperties: true
        type: object
      expiry_days:
        type: integer
      issuer_did:
        type: string
      subject_did:
        type: string
    type: object
  api.VerifiableClaimResponse:
    properties:
      claims:
        additionalProperties: true
        type: object
      expiry_date:
        description: Changed from time.Time to string
        type: string
      id:
        type: string
      issuance_date:
        description: Changed from time.Time to string
        type: string
      issuer:
        type: string
      status:
        type: string
      subject:
        type: string
      type:
        type: string
    type: object
  api.VerificationResultResponse:
    properties:
      errors:
        items:
          type: string
        type: array
      is_valid:
        type: boolean
      validation_time:
        type: string
    type: object
  api.VerifyClaimRequest:
    properties:
      claim_id:
        type: string
    type: object
  api.VerifyDIDProofRequest:
    properties:
      did:
        type: string
      proof:
        type: string
    type: object
  api.VerifyDIDProofResponse:
    properties:
      did:
        type: string
      is_valid:
        type: boolean
      permissions:
        additionalProperties:
          type: boolean
        type: object
      verified_at:
        type: string
    type: object
  api.VerifyOTPRequest:
    properties:
      email:
        type: string
      otp:
        type: string
    type: object
  api.VerifyPermissionRequest:
    properties:
      did:
        type: string
      permissions:
        items:
          type: string
        type: array
    type: object
  api.VerifyPermissionResponse:
    properties:
      did:
        type: string
      permissions:
        additionalProperties:
          type: boolean
        type: object
      verified_at:
        type: string
    type: object
  api.VerifyTransactionRequest:
    properties:
      dest_chain_id:
        type: string
      protocol:
        type: string
      source_chain_id:
        type: string
      tx_id:
        type: string
    type: object
  api.XCMMessageRequest:
    properties:
      dest_chain_id:
        type: string
      message_type:
        type: string
      payload:
        additionalProperties: true
        type: object
      source_chain_id:
        type: string
    type: object
  models.Batch:
    properties:
      blockchain_records:
        items:
          type: object
        type: array
      created_at:
        type: string
      documents:
        items:
          type: object
        type: array
      environment_data:
        items:
          type: object
        type: array
      events:
        description: Relationships
        items:
          type: object
        type: array
      hatchery:
        type: object
      hatchery_id:
        description: Foreign key to Hatchery
        type: integer
      id:
        type: integer
      is_active:
        type: boolean
      quantity:
        type: integer
      species:
        type: string
      status:
        type: string
      updated_at:
        type: string
    type: object
  models.BatchWithHatchery:
    properties:
      blockchain_records:
        items:
          type: object
        type: array
      created_at:
        type: string
      documents:
        items:
          type: object
        type: array
      environment_data:
        items:
          type: object
        type: array
      events:
        description: Relationships
        items:
          type: object
        type: array
      hatchery:
        type: object
      hatchery_contact:
        type: string
      hatchery_id:
        description: Foreign key to Hatchery
        type: integer
      hatchery_location:
        type: string
      hatchery_name:
        type: string
      id:
        type: integer
      is_active:
        type: boolean
      quantity:
        type: integer
      species:
        type: string
      status:
        type: string
      updated_at:
        type: string
    type: object
  models.BlockchainRecord:
    properties:
      created_at:
        type: string
      id:
        type: integer
      is_active:
        type: boolean
      metadata_hash:
        type: string
      related_id:
        type: integer
      related_table:
        type: string
      tx_id:
        type: string
      updated_at:
        type: string
    type: object
  models.Company:
    properties:
      contact_info:
        type: string
      created_at:
        type: string
      hatcheries:
        items:
          type: object
        type: array
      id:
        type: integer
      is_active:
        type: boolean
      location:
        type: string
      name:
        type: string
      type:
        type: string
      updated_at:
        type: string
      users:
        description: Relationships - use swaggertype to avoid recursion
        items:
          type: object
        type: array
    type: object
  models.Document:
    properties:
      batch_id:
        description: Refers to Batch.ID
        type: integer
      blockchain_records:
        description: Related blockchain records
        items:
          type: object
        type: array
      company:
        type: object
      doc_type:
        type: string
      file_name:
        type: string
      file_size:
        type: integer
      id:
        type: integer
      ipfs_hash:
        type: string
      ipfs_uri:
        type: string
      is_active:
        type: boolean
      updated_at:
        type: string
      uploaded_at:
        type: string
      uploaded_by:
        description: Refers to User.ID
        type: integer
      uploader:
        type: object
    type: object
  models.EnvironmentData:
    properties:
      age:
        type: integer
      batch_id:
        description: Refers to Batch.ID
        type: integer
      blockchain_records:
        description: Related blockchain records
        items:
          type: object
        type: array
      density:
        type: number
      id:
        type: integer
      is_active:
        type: boolean
      ph:
        type: number
      salinity:
        type: number
      temperature:
        type: number
      timestamp:
        type: string
      updated_at:
        type: string
    type: object
  models.Event:
    properties:
      actor:
        type: object
      actor_id:
        description: Refers to User.ID
        type: integer
      batch_id:
        description: Refers to Batch.ID
        type: integer
      blockchain_records:
        description: Related blockchain records
        items:
          type: object
        type: array
      event_type:
        type: string
      id:
        type: integer
      is_active:
        type: boolean
      location:
        type: string
      metadata:
        items:
          type: integer
        type: array
      timestamp:
        type: string
      updated_at:
        type: string
    type: object
  models.EventWithActor:
    properties:
      actor:
        type: object
      actor_email:
        type: string
      actor_id:
        description: Refers to User.ID
        type: integer
      actor_name:
        type: string
      actor_role:
        type: string
      batch_id:
        description: Refers to Batch.ID
        type: integer
      blockchain_records:
        description: Related blockchain records
        items:
          type: object
        type: array
      event_type:
        type: string
      id:
        type: integer
      is_active:
        type: boolean
      location:
        type: string
      metadata:
        items:
          type: integer
        type: array
      timestamp:
        type: string
      updated_at:
        type: string
    type: object
  models.Hatchery:
    properties:
      batches:
        description: Relationships
        items:
          type: object
        type: array
      company:
        type: object
      company_id:
        type: integer
      contact:
        type: string
      created_at:
        type: string
      id:
        type: integer
      is_active:
        type: boolean
      location:
        type: string
      name:
        type: string
      updated_at:
        type: string
    type: object
  models.LogisticsEvent:
    properties:
      arrival_time:
        type: string
      batch_id:
        type: integer
      departure_time:
        type: string
      event_type:
        type: string
      from_location:
        type: string
      id:
        type: integer
      metadata:
        items:
          type: integer
        type: array
      status:
        type: string
      timestamp:
        type: string
      to_location:
        type: string
      transporter_name:
        type: string
    type: object
  models.ShipmentTransfer:
    properties:
      batch_id:
        description: Reference to the batch being transferred
        type: integer
      blockchain_tx_id:
        description: Blockchain transaction ID
        type: string
      created_at:
        type: string
      destination_id:
        description: ID of the destination entity
        type: string
      destination_type:
        description: Type of the destination entity
        type: string
      id:
        description: Transfer ID as primary key
        type: integer
      is_active:
        type: boolean
      metadata:
        description: Additional metadata
        items:
          type: integer
        type: array
      nft_contract_address:
        description: NFT contract address
        type: string
      nft_token_id:
        description: NFT token ID if tokenized
        type: integer
      quantity:
        description: Quantity being transferred
        type: integer
      source_id:
        description: ID of the source entity
        type: string
      source_type:
        description: Type of the source entity
        type: string
      status:
        description: Status of transfer
        type: string
      transfer_notes:
        description: Notes about the transfer
        type: string
      transferred_at:
        description: Time of transfer
        type: string
      transferred_by:
        description: User who initiated the transfer
        type: string
      updated_at:
        type: string
    type: object
  models.User:
    properties:
      avatar_url:
        type: string
      company:
        type: object
      company_id:
        type: integer
      created_at:
        type: string
      date_of_birth:
        type: string
      email:
        type: string
      full_name:
        type: string
      id:
        type: integer
      is_active:
        type: boolean
      last_login:
        type: string
      phone:
        type: string
      role:
        type: string
      updated_at:
        type: string
      username:
        type: string
    type: object
host: localhost:8080
info:
  contact:
    email: support@vietchain.com
    name: API Support
  description: Traceability system for shrimp larvae using blockchain technology
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: TracePost-larvaeChain API
  version: "1.0"
paths:
  /admin/analytics/batches:
    get:
      consumes:
      - application/json
      description: Get analytics about batches and production
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.SuccessResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      summary: Get batch analytics
      tags:
      - admin
  /admin/analytics/blockchain:
    get:
      consumes:
      - application/json
      description: Get analytics about blockchain performance
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.SuccessResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      summary: Get blockchain analytics
      tags:
      - admin
  /admin/analytics/compliance:
    get:
      consumes:
      - application/json
      description: Get analytics about system compliance
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.SuccessResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      summary: Get compliance analytics
      tags:
      - admin
  /admin/analytics/dashboard:
    get:
      consumes:
      - application/json
      description: Get comprehensive analytics for the admin dashboard
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.SuccessResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      summary: Get admin dashboard analytics
      tags:
      - admin
  /admin/analytics/export:
    get:
      consumes:
      - application/json
      description: Export all analytics data in JSON format
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.SuccessResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      summary: Export analytics data
      tags:
      - admin
  /admin/analytics/refresh:
    post:
      consumes:
      - application/json
      description: Force a refresh of all analytics data
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.SuccessResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      summary: Refresh analytics data
      tags:
      - admin
  /admin/analytics/system:
    get:
      consumes:
      - application/json
      description: Get metrics about system performance
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.SuccessResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      summary: Get system performance metrics
      tags:
      - admin
  /admin/analytics/users:
    get:
      consumes:
      - application/json
      description: Get analytics about user activity
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.SuccessResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      summary: Get user activity analytics
      tags:
      - admin
  /admin/blockchain/monitor:
    get:
      consumes:
      - application/json
      description: Monitor transactions across multiple blockchains
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.SuccessResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      summary: Monitor blockchain transactions
      tags:
      - admin
  /admin/blockchain/nodes/configure:
    post:
      consumes:
      - application/json
      description: Configure a blockchain node in the network
      parameters:
      - description: Node configuration
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/api.BlockchainNodeConfig'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      summary: Configure blockchain node
      tags:
      - admin
  /admin/certificates/{docId}/revoke:
    put:
      consumes:
      - application/json
      description: Enable admins to revoke compliance certificates
      parameters:
      - description: Document ID
        in: path
        name: docId
        required: true
        type: string
      - description: Revocation information
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/api.RevokeCertificateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      summary: Revoke compliance certificate
      tags:
      - admin
  /admin/compliance/check:
    post:
      consumes:
      - application/json
      description: Check compliance of a batch against FDA/ASC standards
      parameters:
      - description: Standards check request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/api.StandardCheckRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      summary: Check batch compliance
      tags:
      - admin
  /admin/compliance/export:
    post:
      consumes:
      - application/json
      description: Export a batch compliance report in different formats (GS1 EPCIS,
        PDF)
      parameters:
      - description: Report export request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/api.ExportReportRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      summary: Export compliance report
      tags:
      - admin
  /admin/hatcheries/{hatcheryId}/approve:
    put:
      consumes:
      - application/json
      description: Enable admins to approve hatchery accounts
      parameters:
      - description: Hatchery ID
        in: path
        name: hatcheryId
        required: true
        type: string
      - description: Approval information
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/api.ApproveHatcheryRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      summary: Approve hatchery account
      tags:
      - admin
  /admin/identity/issue:
    post:
      consumes:
      - application/json
      description: Issue a decentralized identifier for an entity
      parameters:
      - description: DID issuance request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/api.DIDRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      summary: Issue DID
      tags:
      - admin
  /admin/identity/revoke:
    post:
      consumes:
      - application/json
      description: Revoke a compromised decentralized identifier
      parameters:
      - description: DID revocation request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/api.RevokeDIDRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      summary: Revoke DID
      tags:
      - admin
  /admin/users:
    get:
      consumes:
      - application/json
      description: Get a list of users filtered by role
      parameters:
      - description: Role filter
        in: query
        name: role
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.SuccessResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      summary: Get users by role
      tags:
      - admin
  /admin/users/{userId}/status:
    put:
      consumes:
      - application/json
      description: Enable admins to lock or unlock user accounts
      parameters:
      - description: User ID
        in: path
        name: userId
        required: true
        type: string
      - description: Lock/Unlock information
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/api.LockUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      summary: Lock or unlock user account
      tags:
      - admin
  /alliance/join:
    post:
      consumes:
      - application/json
      description: Submit a request to join the industry alliance
      parameters:
      - description: Alliance join request details
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/api.JoinAllianceRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            allOf:
            - $ref: '#/definitions/api.SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/api.AllianceMember'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      summary: Join alliance
      tags:
      - alliance
  /alliance/members:
    get:
      consumes:
      - application/json
      description: List all members of the industry alliance
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/api.SuccessResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/api.AllianceMember'
                  type: array
              type: object
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      summary: List alliance members
      tags:
      - alliance
  /alliance/share:
    post:
      consumes:
      - application/json
      description: Share batch data with industry alliance members
      parameters:
      - description: Data sharing details
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/api.ShareDataRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            allOf:
            - $ref: '#/definitions/api.SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/api.SharedDataResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      summary: Share data with alliance
      tags:
      - alliance
  /analytics/anomalies/{batchId}:
    get:
      consumes:
      - application/json
      description: Detect anomalies in a batch's data
      parameters:
      - description: Batch ID
        in: path
        name: batchId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/api.SuccessResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/api.TimelineAnomaly'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      summary: Detect anomalies
      tags:
      - analytics
  /analytics/timeline/{batchId}:
    get:
      consumes:
      - application/json
      description: Get the timeline of a batch's transaction history
      parameters:
      - description: Batch ID
        in: path
        name: batchId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/api.SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/api.TransactionTimelineResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      summary: Get transaction timeline
      tags:
      - analytics
  /auth/forgot-password:
    post:
      consumes:
      - application/json
      description: Send OTP to user's email for password reset
      parameters:
      - description: Forgot password details
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/api.ForgotPasswordRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      summary: Forgot password
      tags:
      - auth
  /auth/login:
    post:
      consumes:
      - application/json
      description: Authenticate a user and return a JWT token
      parameters:
      - description: Login credentials
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/api.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/api.SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/api.TokenResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      summary: User login
      tags:
      - auth
  /auth/logout:
    post:
      consumes:
      - application/json
      description: Logout and invalidate the user's session
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.SuccessResponse'
      security:
      - Bearer: []
      summary: Logout
      tags:
      - auth
  /auth/refresh:
    post:
      consumes:
      - application/json
      description: Refresh an existing JWT token before it expires
      parameters:
      - description: Token refresh request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/api.RefreshTokenRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/api.SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/api.TokenResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      summary: Refresh JWT token
      tags:
      - auth
  /auth/register:
    post:
      consumes:
      - application/json
      description: Register a new user
      parameters:
      - description: Registration details
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/api.RegisterRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/api.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      summary: User registration
      tags:
      - auth
  /auth/reset-password:
    post:
      consumes:
      - application/json
      description: Reset password using OTP
      parameters:
      - description: Reset password details
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/api.ResetPasswordRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      summary: Reset password
      tags:
      - auth
  /auth/verify-otp:
    post:
      consumes:
      - application/json
      description: Verify OTP for password reset
      parameters:
      - description: Verify OTP details
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/api.VerifyOTPRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      summary: Verify OTP
      tags:
      - auth
  /baas/deployments:
    get:
      consumes:
      - application/json
      description: Get a list of all smart contract deployments
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.SuccessResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      security:
      - Bearer: []
      summary: List contract deployments
      tags:
      - baas
    post:
      consumes:
      - application/json
      description: Deploy a smart contract to a blockchain network
      parameters:
      - description: Contract deployment configuration
        in: body
        name: deployment
        required: true
        schema:
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      security:
      - Bearer: []
      summary: Deploy blockchain contract
      tags:
      - baas
  /baas/deployments/{deploymentId}:
    get:
      consumes:
      - application/json
      description: Get details of a specific smart contract deployment
      parameters:
      - description: Deployment ID
        in: path
        name: deploymentId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.SuccessResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      security:
      - Bearer: []
      summary: Get contract deployment
      tags:
      - baas
  /baas/networks:
    get:
      consumes:
      - application/json
      description: Get a list of all blockchain networks in the BaaS platform
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.SuccessResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      security:
      - Bearer: []
      summary: List blockchain networks
      tags:
      - baas
    post:
      consumes:
      - application/json
      description: Create a new blockchain network in the BaaS platform
      parameters:
      - description: Network configuration
        in: body
        name: network
        required: true
        schema:
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      security:
      - Bearer: []
      summary: Create a new blockchain network
      tags:
      - baas
  /baas/networks/{networkId}:
    delete:
      consumes:
      - application/json
      description: Delete a blockchain network
      parameters:
      - description: Network ID
        in: path
        name: networkId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.SuccessResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      security:
      - Bearer: []
      summary: Delete blockchain network
      tags:
      - baas
    get:
      consumes:
      - application/json
      description: Get details of a specific blockchain network
      parameters:
      - description: Network ID
        in: path
        name: networkId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.SuccessResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      security:
      - Bearer: []
      summary: Get blockchain network
      tags:
      - baas
    put:
      consumes:
      - application/json
      description: Update configuration of a blockchain network
      parameters:
      - description: Network ID
        in: path
        name: networkId
        required: true
        type: string
      - description: Updated network configuration
        in: body
        name: network
        required: true
        schema:
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      security:
      - Bearer: []
      summary: Update blockchain network
      tags:
      - baas
  /baas/networks/{networkId}/nodes:
    post:
      consumes:
      - application/json
      description: Add a new node to an existing blockchain network
      parameters:
      - description: Network ID
        in: path
        name: networkId
        required: true
        type: string
      - description: Node configuration
        in: body
        name: node
        required: true
        schema:
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      security:
      - Bearer: []
      summary: Add node to network
      tags:
      - baas
  /baas/templates:
    get:
      consumes:
      - application/json
      description: Get a list of available blockchain templates for deployment
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.SuccessResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      security:
      - Bearer: []
      summary: List blockchain templates
      tags:
      - baas
  /batches:
    get:
      consumes:
      - application/json
      description: Retrieve all shrimp larvae batches
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/api.SuccessResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/models.Batch'
                  type: array
              type: object
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      summary: Get all batches
      tags:
      - batches
    post:
      consumes:
      - application/json
      description: Create a new shrimp larvae batch
      parameters:
      - description: Batch creation details
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/api.CreateBatchRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            allOf:
            - $ref: '#/definitions/api.SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/models.Batch'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      summary: Create a new batch
      tags:
      - batches
  /batches/{batchId}:
    get:
      consumes:
      - application/json
      description: Retrieve a shrimp larvae batch by its ID
      parameters:
      - description: Batch ID
        in: path
        name: batchId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/api.SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/models.Batch'
              type: object
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      summary: Get batch by ID
      tags:
      - batches
  /batches/{batchId}/documents:
    get:
      consumes:
      - application/json
      description: Retrieve all documents for a shrimp larvae batch
      parameters:
      - description: Batch ID
        in: path
        name: batchId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/api.SuccessResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/models.Document'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      summary: Get batch documents
      tags:
      - batches
  /batches/{batchId}/environment:
    get:
      consumes:
      - application/json
      description: Retrieve all environment data for a shrimp larvae batch
      parameters:
      - description: Batch ID
        in: path
        name: batchId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/api.SuccessResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/models.EnvironmentData'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      summary: Get batch environment data
      tags:
      - batches
  /batches/{batchId}/events:
    get:
      consumes:
      - application/json
      description: Retrieve all events for a shrimp larvae batch
      parameters:
      - description: Batch ID
        in: path
        name: batchId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/api.SuccessResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/models.Event'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      summary: Get batch events
      tags:
      - batches
  /batches/{batchId}/history:
    get:
      consumes:
      - application/json
      description: Retrieve the blockchain history for a shrimp larvae batch
      parameters:
      - description: Batch ID
        in: path
        name: batchId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/api.SuccessResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/models.BlockchainRecord'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      summary: Get batch blockchain history
      tags:
      - batches
  /batches/{batchId}/qr:
    get:
      consumes:
      - application/json
      description: Generate a QR code for a shrimp larvae batch
      parameters:
      - description: Batch ID
        in: path
        name: batchId
        required: true
        type: string
      - description: IPFS gateway to use (e.g., ipfs.io)
        in: query
        name: gateway
        type: string
      - description: 'QR code format: ''ipfs'', ''gateway'', or ''trace'' (default:
          ''trace'')'
        in: query
        name: format
        type: string
      - description: 'QR code size in pixels (default: 256)'
        in: query
        name: size
        type: integer
      produces:
      - image/png
      responses:
        "200":
          description: QR code as PNG image
          schema:
            type: file
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      summary: Generate batch QR code
      tags:
      - batches
  /batches/{batchId}/qr/basic:
    get:
      consumes:
      - application/json
      description: Generate a QR code for a batch that contains blockchain verification
        data
      parameters:
      - description: Batch ID
        in: path
        name: batchId
        required: true
        type: string
      - description: Response format (png or json)
        in: query
        name: format
        type: string
      produces:
      - image/png
      - application/json
      responses:
        "200":
          description: QR code image
          schema:
            type: file
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      summary: Get batch QR code
      tags:
      - batches
  /batches/{batchId}/status:
    put:
      consumes:
      - application/json
      description: Update the status of a shrimp larvae batch
      parameters:
      - description: Batch ID
        in: path
        name: batchId
        required: true
        type: string
      - description: Status update details
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/api.UpdateBatchStatusRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      summary: Update batch status
      tags:
      - batches
  /blockchain/batch/{batchId}:
    get:
      consumes:
      - application/json
      description: Retrieve batch data directly from the blockchain
      parameters:
      - description: Batch ID
        in: path
        name: batchId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      summary: Get batch from blockchain
      tags:
      - blockchain
  /blockchain/document/{docId}:
    get:
      consumes:
      - application/json
      description: Retrieve document data directly from the blockchain
      parameters:
      - description: Document ID
        in: path
        name: docId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      summary: Get document from blockchain
      tags:
      - blockchain
  /blockchain/environment/{envId}:
    get:
      consumes:
      - application/json
      description: Retrieve environment data directly from the blockchain
      parameters:
      - description: Environment Data ID
        in: path
        name: envId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      summary: Get environment data from blockchain
      tags:
      - blockchain
  /blockchain/event/{eventId}:
    get:
      consumes:
      - application/json
      description: Retrieve event data directly from the blockchain
      parameters:
      - description: Event ID
        in: path
        name: eventId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      summary: Get event from blockchain
      tags:
      - blockchain
  /companies:
    get:
      consumes:
      - application/json
      description: Retrieve all companies in the system
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/api.SuccessResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/models.Company'
                  type: array
              type: object
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      summary: Get all companies
      tags:
      - companies
    post:
      consumes:
      - application/json
      description: Create a new company in the system
      parameters:
      - description: Company creation details
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/api.CreateCompanyRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            allOf:
            - $ref: '#/definitions/api.SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/models.Company'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      summary: Create a new company
      tags:
      - companies
  /companies/{companyId}:
    delete:
      consumes:
      - application/json
      description: Soft-delete a company by its ID
      parameters:
      - description: Company ID
        in: path
        name: companyId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      summary: Delete a company
      tags:
      - companies
    get:
      consumes:
      - application/json
      description: Retrieve a company by its ID
      parameters:
      - description: Company ID
        in: path
        name: companyId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/api.SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/models.Company'
              type: object
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      summary: Get company by ID
      tags:
      - companies
    put:
      consumes:
      - application/json
      description: Update an existing company in the system
      parameters:
      - description: Company ID
        in: path
        name: companyId
        required: true
        type: integer
      - description: Company update details
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/api.UpdateCompanyRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/api.SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/models.Company'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      summary: Update an existing company
      tags:
      - companies
  /companies/{companyId}/hatcheries:
    get:
      consumes:
      - application/json
      description: Retrieve all hatcheries for a specific company
      parameters:
      - description: Company ID
        in: path
        name: companyId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/api.SuccessResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/models.Hatchery'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      summary: Get company hatcheries
      tags:
      - companies
  /companies/{companyId}/stats:
    get:
      consumes:
      - application/json
      description: Retrieve statistics for a specific company
      parameters:
      - description: Company ID
        in: path
        name: companyId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      summary: Get company statistics
      tags:
      - companies
  /compliance/check/{batchId}:
    get:
      consumes:
      - application/json
      description: Check if a batch complies with regulatory standards (EU DR, US
        FDA, ASC, etc.)
      parameters:
      - description: Batch ID
        in: path
        name: batchId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/api.SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/api.ComplianceCheckResult'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      summary: Check batch compliance
      tags:
      - compliance
  /compliance/report/{batchId}:
    get:
      consumes:
      - application/json
      description: Generate a detailed compliance report for a batch against multiple
        standards
      parameters:
      - description: Batch ID
        in: path
        name: batchId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/api.SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/api.ComplianceReport'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      summary: Generate compliance report
      tags:
      - compliance
  /compliance/standards:
    get:
      consumes:
      - application/json
      description: List all available compliance standards
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.SuccessResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      summary: List compliance standards
      tags:
      - compliance
  /compliance/validate:
    post:
      consumes:
      - application/json
      description: Validate a batch against a specific regulatory standard
      parameters:
      - description: Validation request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/api.ComplianceCheckRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/api.SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/api.ComplianceCheckResult'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      summary: Validate against standard
      tags:
      - compliance
  /documents:
    post:
      consumes:
      - multipart/form-data
      description: Upload a document for a shrimp larvae batch
      parameters:
      - description: Batch ID
        in: formData
        name: batch_id
        required: true
        type: integer
      - description: Document type
        in: formData
        name: doc_type
        required: true
        type: string
      - description: Uploader ID
        in: formData
        name: uploaded_by
        required: true
        type: integer
      - description: Document file
        in: formData
        name: file
        required: true
        type: file
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            allOf:
            - $ref: '#/definitions/api.SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/models.Document'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      summary: Upload a document
      tags:
      - documents
  /documents/{documentId}:
    get:
      consumes:
      - application/json
      description: Retrieve a document by its ID
      parameters:
      - description: Document ID
        in: path
        name: documentId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/api.SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/models.Document'
              type: object
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      summary: Get document by ID
      tags:
      - documents
  /environment:
    post:
      consumes:
      - application/json
      description: Record environment data for a shrimp larvae batch
      parameters:
      - description: Environment data details
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/api.RecordEnvironmentDataRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            allOf:
            - $ref: '#/definitions/api.SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/models.EnvironmentData'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      summary: Record environment data
      tags:
      - environment
  /events:
    post:
      consumes:
      - application/json
      description: Create a new event for a shrimp larvae batch
      parameters:
      - description: Event creation details
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/api.CreateEventRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            allOf:
            - $ref: '#/definitions/api.SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/models.Event'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      summary: Create a new event
      tags:
      - events
  /farms:
    get:
      consumes:
      - application/json
      description: Retrieve all farming facilities
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/api.SuccessResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/api.Farm'
                  type: array
              type: object
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      summary: Get all farms
      tags:
      - farms
    post:
      consumes:
      - application/json
      description: Create a new farming facility
      parameters:
      - description: Farm creation details
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/api.CreateFarmRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            allOf:
            - $ref: '#/definitions/api.SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/api.Farm'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      summary: Create a new farm
      tags:
      - farms
  /farms/{farmId}:
    delete:
      consumes:
      - application/json
      description: Delete a farming facility (soft delete)
      parameters:
      - description: Farm ID
        in: path
        name: farmId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      summary: Delete a farm
      tags:
      - farms
    get:
      consumes:
      - application/json
      description: Retrieve a farming facility by its ID
      parameters:
      - description: Farm ID
        in: path
        name: farmId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/api.SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/api.Farm'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      summary: Get farm by ID
      tags:
      - farms
    put:
      consumes:
      - application/json
      description: Update a farming facility
      parameters:
      - description: Farm ID
        in: path
        name: farmId
        required: true
        type: string
      - description: Farm update details
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/api.UpdateFarmRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/api.SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/api.Farm'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      summary: Update a farm
      tags:
      - farms
  /farms/{farmId}/batches:
    get:
      consumes:
      - application/json
      description: Retrieve all batches at a farming facility
      parameters:
      - description: Farm ID
        in: path
        name: farmId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/api.SuccessResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/models.Batch'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      summary: Get farm batches
      tags:
      - farms
  /farms/{farmId}/receive-batch:
    post:
      consumes:
      - application/json
      description: Handle the receipt of a batch at a farming facility
      parameters:
      - description: Farm ID
        in: path
        name: farmId
        required: true
        type: string
      - description: Batch receipt details
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/api.ReceiveBatchRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      summary: Receive batch at farm
      tags:
      - farms
  /farms/{farmId}/records:
    get:
      consumes:
      - application/json
      description: Retrieve all farming records for a farm
      parameters:
      - description: Farm ID
        in: path
        name: farmId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/api.SuccessResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/api.FarmingRecord'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      summary: Get farm records
      tags:
      - farms
  /farms/{farmId}/stats:
    get:
      consumes:
      - application/json
      description: Retrieve statistics for a farming facility
      parameters:
      - description: Farm ID
        in: path
        name: farmId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      summary: Get farm statistics
      tags:
      - farms
  /farms/{farmId}/transfer-batch:
    post:
      consumes:
      - application/json
      description: Handle the transfer of a batch from a farming facility
      parameters:
      - description: Farm ID
        in: path
        name: farmId
        required: true
        type: string
      - description: Batch transfer details
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/api.TransferBatchRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      summary: Transfer batch from farm
      tags:
      - farms
  /farms/records:
    post:
      consumes:
      - application/json
      description: Create a new record of farming activities
      parameters:
      - description: Farming record details
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/api.CreateFarmingRecordRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            allOf:
            - $ref: '#/definitions/api.SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/api.FarmingRecord'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      summary: Create a farming record
      tags:
      - farms
  /geo/batch/{batchId}/current-location:
    get:
      consumes:
      - application/json
      description: Get the current location of a batch
      parameters:
      - description: Batch ID
        in: path
        name: batchId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/api.SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/api.CurrentLocationResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      summary: Get batch current location
      tags:
      - geo
  /geo/batch/{batchId}/journey:
    get:
      consumes:
      - application/json
      description: Get the geographic journey of a batch
      parameters:
      - description: Batch ID
        in: path
        name: batchId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/api.SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/api.BatchJourneyResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      summary: Get batch journey
      tags:
      - geo
  /geo/location:
    post:
      consumes:
      - application/json
      description: Record a geographic location for a batch
      parameters:
      - description: Location details
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/api.RecordGeoLocationRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/api.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      summary: Record geographic location
      tags:
      - geo
  /hatcheries:
    get:
      consumes:
      - application/json
      description: Retrieve all shrimp hatcheries
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/api.SuccessResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/models.Hatchery'
                  type: array
              type: object
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      summary: Get all hatcheries
      tags:
      - hatcheries
    post:
      consumes:
      - application/json
      description: Create a new shrimp hatchery
      parameters:
      - description: Hatchery creation details
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/api.CreateHatcheryRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            allOf:
            - $ref: '#/definitions/api.SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/models.Hatchery'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      summary: Create a new hatchery
      tags:
      - hatcheries
  /hatcheries/{hatcheryId}:
    delete:
      consumes:
      - application/json
      description: Delete a shrimp hatchery (soft delete)
      parameters:
      - description: Hatchery ID
        in: path
        name: hatcheryId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      summary: Delete a hatchery
      tags:
      - hatcheries
    get:
      consumes:
      - application/json
      description: Retrieve a shrimp hatchery by its ID
      parameters:
      - description: Hatchery ID
        in: path
        name: hatcheryId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/api.SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/models.Hatchery'
              type: object
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      summary: Get hatchery by ID
      tags:
      - hatcheries
    put:
      consumes:
      - application/json
      description: Update a shrimp hatchery
      parameters:
      - description: Hatchery ID
        in: path
        name: hatcheryId
        required: true
        type: string
      - description: Hatchery update details
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/api.UpdateHatcheryRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/api.SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/models.Hatchery'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      summary: Update a hatchery
      tags:
      - hatcheries
  /hatcheries/{hatcheryId}/batches:
    get:
      consumes:
      - application/json
      description: Retrieve all batches for a shrimp hatchery
      parameters:
      - description: Hatchery ID
        in: path
        name: hatcheryId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/api.SuccessResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/models.Batch'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      summary: Get hatchery batches
      tags:
      - hatcheries
  /hatcheries/stats:
    get:
      consumes:
      - application/json
      description: Retrieve statistics for all shrimp hatcheries
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.SuccessResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      summary: Get hatchery statistics
      tags:
      - hatcheries
  /health:
    get:
      consumes:
      - application/json
      description: Check if the API is running
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.SuccessResponse'
      summary: Health check
      tags:
      - health
  /identity/claim:
    post:
      consumes:
      - application/json
      description: Create a verifiable claim about an identity
      parameters:
      - description: Verifiable claim details
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/api.VerifiableClaimRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            allOf:
            - $ref: '#/definitions/api.SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/api.VerifiableClaimResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      summary: Create a verifiable claim
      tags:
      - identity
  /identity/claim/{claimId}:
    get:
      consumes:
      - application/json
      description: Get a verifiable claim by ID
      parameters:
      - description: Claim ID
        in: path
        name: claimId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/api.SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/api.VerifiableClaimResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      summary: Get a verifiable claim
      tags:
      - identity
  /identity/claim/{claimId}/revoke:
    put:
      consumes:
      - application/json
      description: Revoke a previously issued claim
      parameters:
      - description: Claim ID
        in: path
        name: claimId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      summary: Revoke a claim
      tags:
      - identity
  /identity/claim/verify:
    post:
      consumes:
      - application/json
      description: Verify a claim's validity
      parameters:
      - description: Verification request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/api.VerifyClaimRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/api.SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/api.VerificationResultResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      summary: Verify a claim
      tags:
      - identity
  /identity/did:
    post:
      consumes:
      - application/json
      description: Create a new decentralized identity for an entity in the supply
        chain
      parameters:
      - description: DID creation details
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/api.CreateIdentityRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            allOf:
            - $ref: '#/definitions/api.SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/api.DecentralizedIDResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      summary: Create a new decentralized identity (DID)
      tags:
      - identity
  /identity/did/{did}:
    get:
      consumes:
      - application/json
      description: Resolve a DID to retrieve the associated DID document
      parameters:
      - description: Decentralized Identifier (DID)
        in: path
        name: did
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/api.SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/api.DIDResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      summary: Resolve a DID
      tags:
      - identity
  /identity/legacy/claims:
    post:
      consumes:
      - application/json
      description: Create a verifiable claim about a decentralized identity
      parameters:
      - description: Claim creation details
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/api.CreateVerifiableClaimRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            allOf:
            - $ref: '#/definitions/api.SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/api.VerifiableClaimResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      summary: Create verifiable claim
      tags:
      - identity
  /identity/legacy/claims/revoke/{claimId}:
    post:
      consumes:
      - application/json
      description: Revoke a verifiable claim
      parameters:
      - description: Claim ID
        in: path
        name: claimId
        required: true
        type: string
      - description: Issuer DID
        in: query
        name: issuerDid
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      summary: Revoke claim
      tags:
      - identity
  /identity/legacy/claims/verify/{claimId}:
    get:
      consumes:
      - application/json
      description: Verify a claim about a decentralized identity
      parameters:
      - description: Claim ID
        in: path
        name: claimId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/api.SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/api.VerificationResultResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      summary: Verify claim
      tags:
      - identity
  /identity/legacy/create:
    post:
      consumes:
      - application/json
      description: Create a new decentralized identity (DID) for an entity
      parameters:
      - description: Identity creation details
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/api.CreateIdentityRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            allOf:
            - $ref: '#/definitions/api.SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/api.DecentralizedIDResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      summary: Create decentralized identity
      tags:
      - identity
  /identity/legacy/resolve/{did}:
    get:
      consumes:
      - application/json
      description: Resolve a DID to retrieve its DID document
      parameters:
      - description: Decentralized Identifier (DID)
        in: path
        name: did
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/api.SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/api.DecentralizedIDResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      summary: Resolve decentralized identity
      tags:
      - identity
  /identity/list:
    get:
      consumes:
      - application/json
      description: List all DIDs that match given criteria
      parameters:
      - description: Filter by entity type
        in: query
        name: entity_type
        type: string
      - description: Filter by status
        in: query
        name: status
        type: string
      - description: 'Page number (default: 1)'
        in: query
        name: page
        type: integer
      - description: 'Number of items per page (default: 20)'
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/api.SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/api.DIDListResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      summary: List decentralized identities
      tags:
      - identity
  /identity/permissions:
    put:
      consumes:
      - application/json
      description: Updates the permissions for a decentralized identity
      parameters:
      - description: DID permissions update details
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/api.UpdateDIDPermissionsRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      security:
      - Bearer: []
      summary: Update DID permissions
      tags:
      - identity
  /identity/permissions/verify:
    post:
      consumes:
      - application/json
      description: Checks if a DID has specific permissions
      parameters:
      - description: Permission verification details
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/api.VerifyPermissionRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/api.SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/api.VerifyPermissionResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      summary: Verify DID permissions
      tags:
      - identity
  /identity/v2/claims:
    post:
      consumes:
      - application/json
      description: Create a verifiable claim about a decentralized identity
      parameters:
      - description: Claim creation details
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/api.CreateVerifiableClaimRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            allOf:
            - $ref: '#/definitions/api.SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/api.VerifiableClaimResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      summary: Create verifiable claim
      tags:
      - identity
  /identity/v2/claims/revoke/{claimId}:
    post:
      consumes:
      - application/json
      description: Revoke a verifiable claim
      parameters:
      - description: Claim ID
        in: path
        name: claimId
        required: true
        type: string
      - description: Issuer DID
        in: query
        name: issuerDid
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      summary: Revoke claim
      tags:
      - identity
  /identity/v2/claims/verify/{claimId}:
    get:
      consumes:
      - application/json
      description: Verify a claim about a decentralized identity
      parameters:
      - description: Claim ID
        in: path
        name: claimId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/api.SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/api.VerificationResultResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      summary: Verify claim
      tags:
      - identity
  /identity/v2/create:
    post:
      consumes:
      - application/json
      description: Create a new decentralized identity (DID) for an entity
      parameters:
      - description: Identity creation details
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/api.CreateIdentityRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            allOf:
            - $ref: '#/definitions/api.SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/api.DecentralizedIDResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      summary: Create decentralized identity
      tags:
      - identity
  /identity/v2/resolve/{did}:
    get:
      consumes:
      - application/json
      description: Resolve a DID to retrieve its DID document
      parameters:
      - description: Decentralized Identifier (DID)
        in: path
        name: did
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/api.SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/api.DecentralizedIDResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      summary: Resolve decentralized identity
      tags:
      - identity
  /identity/verify:
    post:
      consumes:
      - application/json
      description: Verifies a DID proof to authenticate an entity
      parameters:
      - description: DID proof verification details
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/api.VerifyDIDProofRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/api.SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/api.VerifyDIDProofResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      summary: Verify a DID proof
      tags:
      - identity
  /interop/bridges:
    post:
      consumes:
      - application/json
      description: Create a cross-chain bridge between two chains
      parameters:
      - description: Bridge creation details
        in: body
        name: request
        required: true
        schema:
          additionalProperties: true
          type: object
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/api.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      summary: Create cross-chain bridge
      tags:
      - interoperability
  /interop/bridges/{bridgeId}:
    get:
      consumes:
      - application/json
      description: Get details of a specific bridge
      parameters:
      - description: Bridge ID
        in: path
        name: bridgeId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      summary: Get bridge details
      tags:
      - interoperability
  /interop/bridges/cosmos:
    post:
      consumes:
      - application/json
      description: Create a Cosmos bridge for cross-chain communication
      parameters:
      - description: Cosmos bridge details
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/api.CosmosBridgeRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/api.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      summary: Create a Cosmos bridge
      tags:
      - interoperability
  /interop/bridges/cosmos/channels:
    post:
      consumes:
      - application/json
      description: Add an IBC channel to a Cosmos bridge
      parameters:
      - description: IBC channel details
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/api.IBCChannelRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      summary: Add an IBC channel
      tags:
      - interoperability
  /interop/bridges/polkadot:
    post:
      consumes:
      - application/json
      description: Create a Polkadot bridge for cross-chain communication
      parameters:
      - description: Polkadot bridge details
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/api.PolkadotBridgeRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/api.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      summary: Create a Polkadot bridge
      tags:
      - interoperability
  /interop/bridges/transfer:
    post:
      consumes:
      - application/json
      description: Transfer an asset from one chain to another using a bridge
      parameters:
      - description: Asset transfer details
        in: body
        name: request
        required: true
        schema:
          additionalProperties: true
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      summary: Transfer asset across chains
      tags:
      - interoperability
  /interop/chains:
    get:
      consumes:
      - application/json
      description: Get a list of registered external blockchain networks for interoperability
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.SuccessResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      security:
      - Bearer: []
      summary: List external blockchain networks
      tags:
      - interoperability
    post:
      consumes:
      - application/json
      description: Register an external blockchain for cross-chain communication
      parameters:
      - description: Chain registration details
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/api.InteroperabilityRegisterChainRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/api.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      summary: Register an external blockchain
      tags:
      - interoperability
  /interop/chains/{chainId}/status:
    get:
      consumes:
      - application/json
      description: Get the status of a connected blockchain
      parameters:
      - description: Chain ID
        in: path
        name: chainId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      summary: Get chain status
      tags:
      - interoperability
  /interop/connected-chains:
    get:
      consumes:
      - application/json
      description: List all connected external blockchains
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      summary: List connected chains
      tags:
      - interoperability
  /interop/contracts:
    post:
      consumes:
      - application/json
      description: Deploy a smart contract to a blockchain
      parameters:
      - description: Contract deployment details
        in: body
        name: request
        required: true
        schema:
          additionalProperties: true
          type: object
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/api.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      summary: Deploy smart contract
      tags:
      - interoperability
  /interop/contracts/{networkId}/{contractAddress}/query:
    post:
      consumes:
      - application/json
      description: Query the state of a smart contract
      parameters:
      - description: Network ID
        in: path
        name: networkId
        required: true
        type: string
      - description: Contract Address
        in: path
        name: contractAddress
        required: true
        type: string
      - description: Query data
        in: body
        name: request
        required: true
        schema:
          additionalProperties: true
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      summary: Query contract state
      tags:
      - interoperability
  /interop/export/{batchId}:
    get:
      consumes:
      - application/json
      description: Export a batch to GS1 EPCIS format for interoperability
      parameters:
      - description: Batch ID
        in: path
        name: batchId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      summary: Export batch to GS1 EPCIS
      tags:
      - interoperability
  /interop/ibc/accounts:
    post:
      consumes:
      - application/json
      description: Create an interchain account for cross-chain interaction
      parameters:
      - description: Interchain account creation details
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/api.InterChainAccountRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/api.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      summary: Create interchain account
      tags:
      - interoperability
  /interop/ibc/accounts/tx:
    post:
      consumes:
      - application/json
      description: Send a transaction from an interchain account
      parameters:
      - description: Interchain account transaction details
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/api.InterChainAccountTxRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      summary: Send interchain account transaction
      tags:
      - interoperability
  /interop/ibc/channels/{chainId}:
    get:
      consumes:
      - application/json
      description: Query IBC channels for a Cosmos chain
      parameters:
      - description: Chain ID
        in: path
        name: chainId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      summary: Query IBC channels
      tags:
      - interoperability
  /interop/ibc/send:
    post:
      consumes:
      - application/json
      description: Send an IBC packet to a Cosmos chain
      parameters:
      - description: IBC packet details
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/api.IBCPacketRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      summary: Send an IBC packet
      tags:
      - interoperability
  /interop/ibc/trace/{chainId}/{denom}:
    get:
      consumes:
      - application/json
      description: Trace the origin of an IBC token
      parameters:
      - description: Chain ID
        in: path
        name: chainId
        required: true
        type: string
      - description: Token Denom
        in: path
        name: denom
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      summary: Trace IBC token origin
      tags:
      - interoperability
  /interop/protocols:
    get:
      consumes:
      - application/json
      description: Get the list of supported cross-chain protocols
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      summary: Get supported protocols
      tags:
      - interoperability
  /interop/share-batch:
    post:
      consumes:
      - application/json
      description: Share a batch with an external blockchain using the specified data
        standard
      parameters:
      - description: Batch sharing details
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/api.InteroperabilityShareBatchRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/api.SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/api.CrossChainTransactionResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      summary: Share a batch with external blockchain
      tags:
      - interoperability
  /interop/status/{protocol}/{sourceChainId}/{txId}:
    get:
      consumes:
      - application/json
      description: Get the status of a cross-chain transaction
      parameters:
      - description: Transaction ID
        in: path
        name: txId
        required: true
        type: string
      - description: Protocol (ibc, substrate, bridge)
        in: path
        name: protocol
        required: true
        type: string
      - description: Source Chain ID
        in: path
        name: sourceChainId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      summary: Get transaction status
      tags:
      - interoperability
  /interop/transactions/{sourceChainId}/{destChainId}:
    get:
      consumes:
      - application/json
      description: Get cross-chain transactions between chains
      parameters:
      - description: Source Chain ID
        in: path
        name: sourceChainId
        required: true
        type: string
      - description: Destination Chain ID
        in: path
        name: destChainId
        required: true
        type: string
      - description: Limit results
        in: query
        name: limit
        type: integer
      - description: Offset results
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      summary: Get cross-chain transactions
      tags:
      - interoperability
  /interop/txs/{txId}:
    get:
      consumes:
      - application/json
      description: Get details of a transaction that spans multiple blockchain networks
      parameters:
      - description: Transaction ID
        in: path
        name: txId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      security:
      - Bearer: []
      summary: Get cross-chain transaction details
      tags:
      - interoperability
  /interop/verify:
    post:
      consumes:
      - application/json
      description: Verify a cross-chain transaction on the destination chain
      parameters:
      - description: Transaction verification details
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/api.VerifyTransactionRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      summary: Verify a cross-chain transaction
      tags:
      - interoperability
  /interop/xcm/assets/{chainId}:
    get:
      consumes:
      - application/json
      description: Query XCM assets for a Polkadot chain
      parameters:
      - description: Chain ID
        in: path
        name: chainId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      summary: Query XCM assets
      tags:
      - interoperability
  /interop/xcm/send:
    post:
      consumes:
      - application/json
      description: Send an XCM message to a Polkadot parachain
      parameters:
      - description: XCM message details
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/api.XCMMessageRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      summary: Send an XCM message
      tags:
      - interoperability
  /interop/xcm/trace/{chainId}/{assetId}:
    get:
      consumes:
      - application/json
      description: Trace the origin of an XCM asset
      parameters:
      - description: Chain ID
        in: path
        name: chainId
        required: true
        type: string
      - description: Asset ID
        in: path
        name: assetId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      summary: Trace XCM asset origin
      tags:
      - interoperability
  /mobile/batch/{batchId}/summary:
    get:
      consumes:
      - application/json
      description: Get a mobile-optimized summary of a batch
      parameters:
      - description: Batch ID
        in: path
        name: batchId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      summary: Get batch summary for mobile apps
      tags:
      - mobile
  /mobile/trace/{qrCode}:
    get:
      consumes:
      - application/json
      description: Get optimized trace information for mobile devices
      parameters:
      - description: QR Code
        in: path
        name: qrCode
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      summary: Trace a batch using QR code for mobile apps
      tags:
      - mobile
  /nft/batches/{batchId}:
    get:
      consumes:
      - application/json
      description: Retrieve NFT details for a tokenized batch
      parameters:
      - description: Batch ID
        in: path
        name: batchId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      summary: Get batch NFT details
      tags:
      - nft
  /nft/batches/tokenize:
    post:
      consumes:
      - application/json
      description: Create an NFT token representing a batch
      parameters:
      - description: Batch tokenization details
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/api.TokenizeBatchRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      summary: Tokenize batch
      tags:
      - nft
  /nft/contracts:
    post:
      consumes:
      - application/json
      description: Deploy a new NFT contract for batch tokenization
      parameters:
      - description: NFT contract deployment details
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/api.NFTContractDeployRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/api.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      summary: Deploy NFT contract
      tags:
      - nft
  /nft/tokens/{tokenId}:
    get:
      consumes:
      - application/json
      description: Retrieve details of an NFT by token ID
      parameters:
      - description: Token ID
        in: path
        name: tokenId
        required: true
        type: string
      - description: Contract address
        in: query
        name: contract
        required: true
        type: string
      - description: Network ID
        in: query
        name: network
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      summary: Get NFT details
      tags:
      - nft
  /nft/tokens/{tokenId}/transfer:
    put:
      consumes:
      - application/json
      description: Transfer an NFT to a new owner
      parameters:
      - description: Token ID
        in: path
        name: tokenId
        required: true
        type: string
      - description: Transfer details
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/api.TransferNFTRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      summary: Transfer NFT
      tags:
      - nft
  /nft/transactions/{transferId}:
    get:
      consumes:
      - application/json
      description: Retrieve NFT details for a tokenized transaction
      parameters:
      - description: Transaction/Transfer ID
        in: path
        name: transferId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.SuccessResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      summary: Get transaction NFT details
      tags:
      - nft
  /nft/transactions/{transferId}/qr:
    get:
      consumes:
      - application/json
      description: Generate a QR code for transaction verification that links to a
        verification page
      parameters:
      - description: Transaction/Transfer ID
        in: path
        name: transferId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.SuccessResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      summary: Generate transaction verification QR
      tags:
      - nft
  /nft/transactions/{transferId}/trace:
    get:
      consumes:
      - application/json
      description: Verify and trace the history of a transaction on the blockchain
      parameters:
      - description: Transaction/Transfer ID
        in: path
        name: transferId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.SuccessResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      summary: Trace transaction
      tags:
      - nft
  /nft/transactions/tokenize:
    post:
      consumes:
      - application/json
      description: Create an NFT token representing a transaction in the supply chain
      parameters:
      - description: Transaction tokenization details
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/api.TokenizeTransactionRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      summary: Tokenize transaction
      tags:
      - nft
  /qr/{batchID}:
    get:
      consumes:
      - application/json
      description: Trace a shrimp larvae batch by QR code, including complete logistics
        tracking
      parameters:
      - description: Batch ID
        in: path
        name: batchID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/api.SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/api.TraceByQRCodeResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      summary: Trace by QR code
      tags:
      - qr
  /qr/gateway/{batchId}:
    get:
      consumes:
      - application/json
      description: Generate a QR code for a batch with a public IPFS gateway URL
      parameters:
      - description: Batch ID
        in: path
        name: batchId
        required: true
        type: string
      - description: 'IPFS gateway to use (default: ipfs.io)'
        in: query
        name: gateway
        type: string
      produces:
      - image/png
      responses:
        "200":
          description: QR code as PNG image
          schema:
            type: file
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      summary: Generate gateway QR code
      tags:
      - qr
  /scaling/sharding/configure:
    post:
      consumes:
      - application/json
      description: Configure sharding for improved scalability and performance
      parameters:
      - description: Sharding configuration
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/api.ShardingConfigRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      summary: Configure sharding
      tags:
      - scaling
  /shipments/transfers:
    get:
      consumes:
      - application/json
      description: Retrieve all shipment transfers
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/api.SuccessResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/models.ShipmentTransfer'
                  type: array
              type: object
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      summary: Get all shipment transfers
      tags:
      - shipments
    post:
      consumes:
      - application/json
      description: Create a new shipment transfer with optional NFT generation
      parameters:
      - description: Transfer details
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/api.CreateShipmentTransferRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            allOf:
            - $ref: '#/definitions/api.SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/models.ShipmentTransfer'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      summary: Create a shipment transfer
      tags:
      - shipments
  /shipments/transfers/{id}:
    delete:
      consumes:
      - application/json
      description: Soft delete a shipment transfer (mark as inactive)
      parameters:
      - description: Transfer ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      summary: Delete a shipment transfer
      tags:
      - shipments
    get:
      consumes:
      - application/json
      description: Retrieve a shipment transfer by its ID
      parameters:
      - description: Transfer ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/api.SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/models.ShipmentTransfer'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      summary: Get shipment transfer by ID
      tags:
      - shipments
    put:
      consumes:
      - application/json
      description: Update an existing shipment transfer status and metadata
      parameters:
      - description: Transfer ID
        in: path
        name: id
        required: true
        type: string
      - description: Transfer update details
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/api.UpdateShipmentTransferRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/api.SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/models.ShipmentTransfer'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      summary: Update a shipment transfer
      tags:
      - shipments
  /shipments/transfers/{id}/qr:
    get:
      consumes:
      - application/json
      description: Generate a QR code for a shipment transfer with embedded traceability
        data
      parameters:
      - description: Transfer ID
        in: path
        name: id
        required: true
        type: string
      - description: 'Format: ''png'' or ''json'' (default: ''png'')'
        in: query
        name: format
        type: string
      produces:
      - image/png
      - application/json
      responses:
        "200":
          description: QR code image or JSON data
          schema:
            type: file
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      summary: Generate transfer QR code
      tags:
      - shipments
  /shipments/transfers/batch/{batchId}:
    get:
      consumes:
      - application/json
      description: Retrieve all shipment transfers for a specific batch
      parameters:
      - description: Batch ID
        in: path
        name: batchId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/api.SuccessResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/models.ShipmentTransfer'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      summary: Get transfers by batch ID
      tags:
      - shipments
  /supplychain/{batchId}:
    get:
      consumes:
      - application/json
      description: Retrieve the complete journey of a batch through the supply chain
      parameters:
      - description: Batch ID
        in: path
        name: batchId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/api.SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/api.SupplyChainDetails'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      summary: Get complete supply chain details
      tags:
      - supplychain
  /supplychain/{batchId}/qr:
    get:
      consumes:
      - application/json
      description: Generate a QR code with the complete supply chain journey data
      parameters:
      - description: Batch ID
        in: path
        name: batchId
        required: true
        type: string
      - description: 'Format: ''png'' or ''json'' (default: ''png'')'
        in: query
        name: format
        type: string
      produces:
      - image/png
      - application/json
      responses:
        "200":
          description: QR code image or JSON data
          schema:
            type: file
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      summary: Generate supply chain QR code
      tags:
      - supplychain
  /users/me:
    get:
      consumes:
      - application/json
      description: Retrieve the current user's information
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/api.SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/models.User'
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      summary: Get current user
      tags:
      - users
    put:
      consumes:
      - application/json
      description: Update the current user's information
      parameters:
      - description: Profile update details
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/api.UpdateProfileRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      summary: Update current user
      tags:
      - users
  /users/me/password:
    put:
      consumes:
      - application/json
      description: Change the current user's password
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      summary: Change password
      tags:
      - users
securityDefinitions:
  Bearer:
    description: Type "Bearer" followed by a space and JWT token.
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
