# README

# Blockchain Logistics Traceability - Database Migrations

This directory contains database migrations for the Blockchain Logistics Traceability system.

## Migration Commands

### Create a new migration

```
alembic revision --autogenerate -m "Migration message"
```

### Apply migrations

```
alembic upgrade head
```

### Downgrade to a specific revision

```
alembic downgrade <revision>
```

### Check current migration version

```
alembic current
```

### Show migration history

```
alembic history
```

## Best Practices

1. Always create migrations through autogenerate when possible
2. Review autogenerated migrations before applying
3. Test migrations on a staging environment before production
4. Keep migrations reversible when possible
5. Document complex migrations with comments

## Migration Naming Conventions

- Use descriptive names for migrations
- Include the purpose of the migration, e.g., "add_user_verification_fields"
- For multiple related changes, group them in one migration

## Troubleshooting

1. If migrations fail, check the database connection settings
2. Make sure all models are imported in env.py
3. For offline migrations, ensure sqlalchemy.url is properly configured
