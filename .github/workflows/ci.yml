name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test-backend:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        go-version: [1.21.x, 1.22.x]
    
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: logistics_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Go ${{ matrix.go-version }}
      uses: actions/setup-go@v4
      with:
        go-version: ${{ matrix.go-version }}

    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Install backend dependencies
      run: |
        cd back-end
        go mod tidy
        go mod download

    - name: Run backend linting
      run: |
        cd back-end
        go vet ./...
        go fmt ./...

    - name: Run backend tests
      run: |
        cd back-end
        go test -v ./...
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/logistics_test

    - name: Generate backend coverage report
      run: |
        cd back-end
        go test -coverprofile=coverage.out ./...
        go tool cover -html=coverage.out -o coverage.html

  test-frontend-web:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18.x, 20.x]

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        cache-dependency-path: front-end/web/tracepost/package-lock.json

    - name: Install frontend web dependencies
      run: |
        cd front-end/web/tracepost
        npm ci

    - name: Run frontend web linting
      run: |
        cd front-end/web/tracepost
        npm run lint

    - name: Build frontend web
      run: |
        cd front-end/web/tracepost
        npm run build

  test-frontend-mobile:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18.x, 20.x]

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'

    - name: Install frontend mobile dependencies
      run: |
        cd front-end/app/tracepost
        npm install

    - name: Run frontend mobile linting
      run: |
        cd front-end/app/tracepost
        npm run lint

  security-scan:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'

    - name: Run npm audit for frontend web
      run: |
        cd front-end/web/tracepost
        npm audit --audit-level moderate

    - name: Run npm audit for frontend mobile
      run: |
        cd front-end/app/tracepost
        npm audit --audit-level moderate

    - name: Run Go security scan
      run: |
        cd back-end
        go list -json -deps ./... | grep -v "\"Standard\":true" | jq -r 'select(.Deps != null) | .ImportPath' | xargs go list -f '{{.ImportPath}}: {{.Module.Path}}' | sort -u

  docker-build:
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend-web, test-frontend-mobile]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Build Docker images
      run: |
        docker-compose build --no-cache

    - name: Test Docker compose
      run: |
        docker-compose up -d
        sleep 30
        docker-compose ps
        docker-compose down

  deploy-staging:
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend-web, test-frontend-mobile, security-scan, docker-build]
    if: github.ref == 'refs/heads/develop'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Deploy to staging
      run: |
        echo "Deploying to staging environment..."
        # Add your staging deployment scripts here

  deploy-production:
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend-web, test-frontend-mobile, security-scan, docker-build]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Deploy to production
      run: |
        echo "Deploying to production environment..."
        # Add your production deployment scripts here

  notify:
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always()
    
    steps:
    - name: Notify team
      run: |
        echo "Notifying team about deployment status..."
        # Add notification logic (Slack, Discord, email, etc.) 