name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test-backend:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [16.x, 18.x]
    
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: logistics_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        cache-dependency-path: back-end/package-lock.json

    - name: Install backend dependencies
      run: |
        cd back-end
        npm ci

    - name: Run backend linting
      run: |
        cd back-end
        npm run lint

    - name: Run backend tests
      run: |
        cd back-end
        npm test
      env:
        NODE_ENV: test
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/logistics_test

    - name: Generate backend coverage report
      run: |
        cd back-end
        npm run test:coverage

    - name: Upload backend coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./back-end/coverage/lcov.info
        flags: backend
        name: backend-coverage

  test-frontend:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [16.x, 18.x]

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        cache-dependency-path: front-end/package-lock.json

    - name: Install frontend dependencies
      run: |
        cd front-end
        npm ci

    - name: Run frontend linting
      run: |
        cd front-end
        npm run lint

    - name: Run frontend tests
      run: |
        cd front-end
        npm test -- --coverage --watchAll=false

    - name: Build frontend
      run: |
        cd front-end
        npm run build

    - name: Upload frontend coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./front-end/coverage/lcov.info
        flags: frontend
        name: frontend-coverage

  test-smart-contracts:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Use Node.js 18.x
      uses: actions/setup-node@v3
      with:
        node-version: 18.x
        cache: 'npm'
        cache-dependency-path: blockchain/package-lock.json

    - name: Install blockchain dependencies
      run: |
        cd blockchain
        npm ci

    - name: Compile smart contracts
      run: |
        cd blockchain
        npx hardhat compile

    - name: Run smart contract tests
      run: |
        cd blockchain
        npx hardhat test

    - name: Run smart contract coverage
      run: |
        cd blockchain
        npx hardhat coverage

    - name: Upload smart contract coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./blockchain/coverage/lcov.info
        flags: smart-contracts
        name: smart-contracts-coverage

  security-scan:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'

    - name: Run npm audit for backend
      run: |
        cd back-end
        npm audit --audit-level moderate

    - name: Run npm audit for frontend
      run: |
        cd front-end
        npm audit --audit-level moderate

  docker-build:
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Build Docker images
      run: |
        docker-compose build --no-cache

    - name: Test Docker compose
      run: |
        docker-compose up -d
        sleep 30
        docker-compose ps
        docker-compose down

  deploy-staging:
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend, test-smart-contracts, security-scan, docker-build]
    if: github.ref == 'refs/heads/develop'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Deploy to staging
      run: |
        echo "Deploying to staging environment..."
        # Add your staging deployment scripts here

  deploy-production:
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend, test-smart-contracts, security-scan, docker-build]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Deploy to production
      run: |
        echo "Deploying to production environment..."
        # Add your production deployment scripts here

  notify:
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always()
    
    steps:
    - name: Notify team
      run: |
        echo "Notifying team about deployment status..."
        # Add notification logic (Slack, Discord, email, etc.) 